@import 'tweaks';

@function gtkalpha($c, $a) {
	@return unquote("alpha(#{$c}, #{$a})");
}

@function gtkmix($c1,$c2,$r) {
	$ratio: 1 -  $r / 100%; // match SCSS mix()
	@return unquote("mix(#{$c1},#{$c2},#{$ratio})");
}

@function gtkshade($c,$s) {
	@return unquote("shade(#{$c},#{$s})");
}

@function gtkcolor($c) {
	@return unquote("@#{$c}");
}

@function on($color, $state: 'primary') {
	// Allow 'light' or 'dark' to $color
	@if ($color == 'light') { $color: $white; }
	@if ($color == 'dark') 	{ $color: $black; }

	// Calculate color brightness according to https://www.w3.org/TR/AERT/#color-contrast
	$brightness: (red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000;

	@if ($brightness >= 156) {
		@if ($state == 'primary')            { @return rgba($black, 0.87); }
		@if ($state == 'secondary')          { @return rgba($black, 0.6); }
		@if ($state == 'disabled')           { @return rgba($black, 0.38); }
		@if ($state == 'secondary-disabled') { @return rgba($black, 0.3); }
		@if ($state == 'track')              { @return rgba($black, 0.26); }
		@if ($state == 'track-disabled')     { @return rgba($black, 0.12); }
		@if ($state == 'divider')            { @return rgba($black, 0.12); }
		@if ($state == 'secondary-fill')     { @return rgba($black, 0.08); }
		@if ($state == 'fill')               { @return rgba($black, 0.04); }
	} @else {
		@if ($state == 'primary')            { @return $white; }
		@if ($state == 'secondary')          { @return rgba($white, 0.7); }
		@if ($state == 'disabled')           { @return rgba($white, 0.5); }
		@if ($state == 'secondary-disabled') { @return rgba($white, 0.32); }
		@if ($state == 'track')              { @return rgba($white, 0.3); }
		@if ($state == 'track-disabled')     { @return rgba($white, 0.12); }
		@if ($state == 'divider')            { @return rgba($white, 0.12); }
		@if ($state == 'secondary-fill')     { @return rgba($white, 0.08); }
		@if ($state == 'fill')               { @return rgba($white, 0.04); }
	}
}

@function text($color, $state: 'primary', $theme: $accent-default) {
	$theme-white: mix($white, $theme, 80%);
	$theme-black: mix($black, $theme, 80%);

	// Allow 'light' or 'dark' to $color
	@if ($color == 'light') { $color: mix($white, $theme, 0%); }
	@if ($color == 'dark') 	{ $color: mix($black, $theme, 0%); }

	// Calculate color brightness according to https://www.w3.org/TR/AERT/#color-contrast
	$brightness: (red($color) * 299 + green($color) * 587 + blue($color) * 114) / 1000;

	@if ($brightness >= 156) {
		@if ($state == 'primary')            { @return rgba($theme-black, 0.87); }
		@if ($state == 'secondary')          { @return rgba($theme-black, 0.6); }
		@if ($state == 'disabled')           { @return rgba($theme-black, 0.38); }
		@if ($state == 'secondary-disabled') { @return rgba($theme-black, 0.3); }
		@if ($state == 'track')              { @return rgba($theme-black, 0.26); }
		@if ($state == 'track-disabled')     { @return rgba($theme-black, 0.12); }
		@if ($state == 'divider')            { @return rgba($theme-black, 0.12); }
		@if ($state == 'secondary-fill')     { @return rgba($theme-black, 0.08); }
		@if ($state == 'fill')               { @return rgba($theme-black, 0.04); }
	} @else {
		@if ($state == 'primary')            { @return $theme-white; }
		@if ($state == 'secondary')          { @return rgba($theme-white, 0.7); }
		@if ($state == 'disabled')           { @return rgba($theme-white, 0.5); }
		@if ($state == 'secondary-disabled') { @return rgba($theme-white, 0.32); }
		@if ($state == 'track')              { @return rgba($theme-white, 0.3); }
		@if ($state == 'track-disabled')     { @return rgba($theme-white, 0.12); }
		@if ($state == 'divider')            { @return rgba($theme-white, 0.12); }
		@if ($state == 'secondary-fill')     { @return rgba($theme-white, 0.08); }
		@if ($state == 'fill')               { @return rgba($theme-white, 0.04); }
	}
}

@function highlight($color) {
	@if (lightness($color) >= 80%)      { @return rgba($white, 0.15); }
	@else if (lightness($color) >= 40%) { @return rgba($white, 0.2); }
	@else                               { @return rgba($white, 0.1); }
}

@function overlay($color, $state: 'normal') {
	@if ($state == 'normal')   { @return rgba(on($color), 0.06); }
	@if ($state == 'hover')    { @return rgba(on($color), 0.12); }
	@if ($state == 'focus')    { @return rgba(on($color), 0.08); }
	@if ($state == 'active')   { @return rgba(on($color), 0.20); }
	@if ($state == 'checked')  { @return rgba(on($color), 0.15); }
	@if ($state == 'selected') { @return rgba(on($color), 0.1); }
}

// Basic colors
$drop_target_color:                     $orange-dark;
$inverse-indicator:                     mix($accent-default, $white, 0%);
$applet-primary:                        $accent-default;

$surface:                               $bg-300;
$base:                                  $bg-200;
$base-alt:                              $bg-100;
$menu:                                  $bg-250;

$bg-main:                               $bg-200;
$bg-dark:                               $bg-350;

$tooltip:                               rgba(darken($bg-400, 3%), 0.9);
$osd:                                   mix($accent-default, $bg-400, 0%);
$scrim:                                 mix($accent-default, $bg-300, 0%);
$scrim-alt:                             mix($accent-default, $bg-200, 0%);
$scrim-inverse:                         rgba($white, 0.1);
//$titlebar:                              $bg-400;
$titlebar-backdrop:                     $bg-400;
$popover:                               $bg-300;
$panel-solid:                           $bg-400; // for Unity panel which doesn't allow translucent colors
$panel:                                 rgba($panel-solid, $panel_opacity);


$entry:                                 on($bg-default, secondary-fill);



$warning:                               $yellow-default;
$error:                                 $red-default;
$success:                               $green-default;

$suggested:                             $accent-default;
$destructive:                           $error;

$assets-color:                          $accent-default;


$window-border:                         rgba($black, 0.75);
$solid-border:                          mix(white, $base, 12%);
$border-alt:                            rgba($black, 0.16); // darker border color for Chrome and Firefox

// Overlay state colors
$overlay-normal:                        gtkalpha(currentColor, 0.05);
$overlay-hover:                         gtkalpha(currentColor, 0.08);
$overlay-focus:                         gtkalpha(currentColor, 0.08);
$overlay-focus-hover:                   gtkalpha(currentColor, 0.16);
$overlay-active:                        gtkalpha(currentColor, 0.12);
$overlay-checked:                       gtkalpha(currentColor, 0.10);
$overlay-selected:                      gtkalpha(currentColor, 0.06);

// Text and derivative colors
$track:                                 on($bg-default, track);
$track-disabled:                        on($bg-default, track-disabled);
$divider:                               on($bg-default, divider);
$fill:                                  on($bg-default, fill);

$panel-text:                            on($panel);
$panel-text-secondary:                  on($panel, secondary);
$panel-text-disabled:                   on($panel, disabled);
$panel-text-secondary-disabled:         on($panel, secondary-disabled);
$panel-track:                           on($panel, track);
$panel-track-disabled:                  on($panel, track-disabled);
$panel-divider:                         on($panel, divider);
$panel-fill:                            on($panel, fill);

$accent-color:                          $accent-default;

// workaround for GTK3 @placeholder_text_color which doesn't allow translucent colors
$placeholder_text_color:                mix($white, $base, percentage(0.7));


$light-shade: 							rgba($black, 0.04); 	//reviewed&replaced
$shade:                           		rgba($black, 0.3); 		//reviewed&replaced

$text:                                  $fg-default; 			//reviewed&replaced
$text-secondary:                        $fg-dark;               //reviewed&replaced
$text-disabled:                         $fg-default-inactive;   //reviewed&replaced
$text-secondary-disabled:               $fg-dark-inactive;      //reviewed&replaced

$link:                                  $blue-dark;				//reviewed&replaced
$link-visited:                          $purple-dark;			//reviewed&replaced